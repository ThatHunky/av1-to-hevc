# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
# *.spec - Keep our manually created AV1toHEVC.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the .idea directory in version control.
.idea/

# VS Code
.vscode/
*.code-workspace

# Project-specific build artifacts
dist/
build/
*.exe
*.msi
*.dmg
*.pkg
*.deb
*.rpm

# PyInstaller spec files (if auto-generated)
# Keep AV1toHEVC.spec as it's manually created

# Installer files
installer/
*.iss

# Test files and temporary data
test_videos/
temp/
tmp/
*.tmp
*.temp

# Log files
*.log
logs/

# Configuration files with sensitive data
config.ini
settings.ini
.env.local
.env.production

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
desktop.ini

# Windows shortcuts
*.lnk

# Backup files
*.bak
*.backup
*~

# Editor temporary files
*.swp
*.swo
*~

# FFmpeg binaries (if included)
ffmpeg.exe
ffprobe.exe
ffplay.exe

# Video files for testing
*.mp4
*.mkv
*.avi
*.mov
*.wmv
*.flv
*.webm
*.m4v
*.3gp
*.ogv

# Exclude large test files
*.bin
*.dat

# Documentation build
docs/build/
docs/_build/

# Coverage reports
htmlcov/
.coverage

# Profiling data
*.prof

# Virtual environment activation scripts
activate
activate.bat
activate.ps1
deactivate.bat

# Local development files
local_config.py
dev_settings.py
debug.py

# IDE and editor files
*.sublime-project
*.sublime-workspace
.vscode/
.idea/

# Package manager files
package-lock.json
yarn.lock

# Node modules (if any JS tools are used)
node_modules/

# Temporary PyInstaller files
*.toc
*.pyz
*.zip

# Windows installer files
*.msi
*.msm
*.msp

# macOS installer files
*.pkg
*.dmg

# Linux package files
*.deb
*.rpm
*.tar.gz
*.tar.xz

# Archive files
*.zip
*.rar
*.7z
*.tar
*.gz
*.bz2
*.xz 